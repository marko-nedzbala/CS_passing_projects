

Tuples
(string, int, string) values01 = ("a", 5, "c");
Console.WriteLine($"Values01 {values01}");

var values02 = ("a", 5, "c");
Console.WriteLine($"Values02 {values02}");
Console.WriteLine($"First item: {values02.Item1}");
Console.WriteLine($"Second item: {values02.Item2}");
Console.WriteLine($"Third item: {values02.Item2}");

// add names
(string FirstLetter, int theNumber, string SecondLetter) valuesWithNames01 = ("a", 5, "c");
Console.WriteLine($"First item: {valuesWithNames01.FirstLetter}");
Console.WriteLine($"Second item: {valuesWithNames01.theNumber}");
Console.WriteLine($"Third item: {valuesWithNames01.SecondLetter}");

// can use the actual name or the item number
var valuesWithNames02 = (FirstLetter: "a", TheNumber: 5, SecondLetter: "c");
Console.WriteLine($"First item: {valuesWithNames02.Item1}");
Console.WriteLine($"Second item: {valuesWithNames02.Item2}");
Console.WriteLine($"Third item: {valuesWithNames02.Item3}");

Inferred Variable Names
var foo = new { Prop1 = "first", Prop2 = "second" };
var bar = (foo.Prop1, foo.Prop2);
Console.WriteLine($"Inferred type: {bar.Prop1}; {bar.Prop2}");

Returning tuples
static (dataType01 parameterName01, dataType02 parameterName02) MethodName()
{
	return (value01, value02);
}



PART III - OBJECT ORIENTED PROGRAMMING WITH C#
Chapter05
Understanding Encapsulation

a class is a user-defined type that is composed of field data (member variables)
state: the set of field data of a class instance (object)

Constructors
this: provides access to the current class instance

Chaining constructor calls
the constructor with the greatest number of arguments as the "master constructor"

public MyClass
{
	public MyClass() {}
	
	public MyClass(int aNumber)
		: this(aNumber, "") {}
		
	public MyClass(string aString)
		: this(0, aString) {}
		
	public MyClass(int aNumber, string aString)
	{
		// a bunch of amazing logic
	}
}

Optional arguments with constructors

public MyClass
{		
	// can use this 1 constructor to define: 0, 1, or 2 parameters
	public MyClass(int aNumber = 0, string aString = "")
	{
		// a bunch of amazing logic
	}
}

Acess Modifiers
type members: implicity private
types: implicity internal

use properties when setting class data

Pattern matching with properties

// extended property patterns

propertyName = this switch
{
	{ propertyName01 = value01, propertyName02: enumType.value, propertyName03.value > value03 }
		=> propertyName += x * y;
	_ => propertyName, //the catch all
};

public void GiveBonus(float amount)
{
	Pay = this switch
	{
		{ Age: >= 18, PayType: EmployeePayTypeEnum.Commission, HireDate.Year: > 2020 }
			=> Pay += 0.10F * amount,
		{ Age: >= 18, PayType: EmployeePayTypeEnum.Hourly, HireDate.Year: > 2020 }
			=> Pay += 40F * amount / 2080F,
		{ Age: >= 18, PayType: EmployeePayTypeEnum.Salaried, HireDate.Year: > 2020 }
			=> Pay += amount,
		_ => Pay += 0
	};
}

Object Initialization
object initializer syntax

MyClass myClassInstance = new MyClass { propertyName01 = value01, propertyName02 = value02 };

init-only setters
enable a property to have its value set during initialization, but after construction is complete on the object, the property becomes read-only. They are immutable properties

class MyClass
{
	public int PropertyName01 { get; init; }
	public int PropertyName02 { get; init; }
	
	// the key is here, the property names can be set once, then read onwards
	public MyClass(dataType01 parameterName01, dataType02 parameterName02)
	{
		PropertyName01 = parameterName01;
		PropertyName02 = parameterName02;
	}
}

can call a custom constructor with initialization syntax
MyClass myClassInstance = new MyClass(parameter) { propertyName01 = value01, propertyName02 = value02 };

Records
provide synthesized methods for equality using value semantics and data encapsulation, a special type of class

record and record class mean the same thing

positional record type: the constructor defines the properties on the record.
3 considerations with this syntax:
1.) Cannot use object initialization of record types using the compact definition syntax
2.) The record must be constructed with the properties in the correct positional
3.) The casing of the properties in the constructor is directly translated to the casing of the properties on the record type

We can deconstruct a mutable record type
MyRecord myRecordInstance = new MyRecord("Bob", 40, "Blue");
myRecordInstance.Deconstruct(out string name, out int age, out string color);
Console.WriteLine($"Name: {name} Age: {age} Color: {color}");

out variables only have to match the position of the parameters, can change the name
myRecordInstance.Deconstruct(out string a, out int b, out string c);
Console.WriteLine($"Name: {a} Age: {b} Color: {c}");

can also use the tuple syntax
var (name01, age01, color01) = myRecordInstance;
Console.WriteLine($"Name: {name01} Age: {age01} Color: {color01}");

Record types are considered equal if:
1.) They hold the same values
2.) They are the same type
just like value types

Copying Record types
assigning a record type instance to a new variable creates a pointer to the same reference which is the same behavior as classes

nondestructive mutation: create a true copy of a record with 1 or more properties modified use the with expression
the with expression needs to be updated by specifiying their new values, any properties not listed are shallow copied exactly

MyRecord newRecordInstance = MyRecord with { Age = 25 };

Record Structs
value type equivalent of record objects, mutable by default
can use:
1.) positional parameters
or
2.) standard property syntax

Provide:
1.) value equality
2.) nondestructive mutation
3.) built-in display formatting

// example

// positional syntax
public record struct MyStruct(dataType01 value01, dataType02 value02);
var mine = new MyStruct(1, 2, 3);
mine.value01 = 10;

// standard properties
public record struct MyStruct()
{
	public dataType01 value01 { get; set; } = default;
	public dataType02 value02 { get; set; } = default;
	
	public MyStruct(dataType01 value01, dataType02 value02) : this()
	{
		this.value01 = value01;
		this.value02 = value02;
	}
};

var mine = new MyStruct(1, 2, 3);
mine.value01 = 10;

Can make the structs immutable
public readonly record struct MyStruct(dataType01 value01, dataType02 value02);

Can deconstruct record structs

var (a, b, c) = mine;
Console.WriteLine($"A: {a} B: {b} C: {c}");



Chapter06
Understanding Inheritance and Polymorphism

A derived class never inherits the constructors of a parent class, constructors are used to construct only the class that they are defined within

Inheritance constructor chaining
public DerivedClass(dataType01 baseArgument01, dataType02 baseArgument02, dataType03 derivedArgument01)
	: base(baseArgument01, baseArgument02, derivedArgument01)
{
	derivedArgument01 = propertyName;
}

protected keyword allows the derived class to access private members of the base class, derived class will not have to access the data indirectly using public methods or properties

Record inheritance
functions the same as class inheritance

Containment/delegation model or aggregation: a "has-a" relationship

public ClassB { ... }

public ClassA
{
	ClassB b = new ClassB();
	// expose certain benefit behaviors of an object
	public returnType MethodName()
	{ ... }
	// expose via custom property
	public ClassB PropertyName
	{ ... }
}
// to use
ClassA a = new ClassA();
var value = a.MethodName();

Polymorphism
how related types respond differently to the same request, subclass to define its own version of a method defined by its base class

virtual and override keywords

you can override a method, then seal it from possibility be overiden again

public override sealed returnType MethodName() { ... }

Abstract
polymorphic method: the class will define an implementation
abstract classes are pure protocol

Casting between types
implicit cast: when 2 classes are related by an "is-an" relationship, it is always safe to convert a derived object to the base object

explicit cast: can explicity downcast using the C# casting operator
evaluated at runtime which could lead to errors
as keyword: determines whether an item in an array is compatible with another item, returns null
is keyword: similar to "as" but returns false



Chapter07
Understanding Structured Exception Handling

Building blocks of .NET Exception Handling
1.) a class type that represents the details of the exception
2.) a member that throws an instance of the exception class to the caller, under the right circumstances
3.) a block of code on the caller's side that invokes the exception-prone member
4.) a block of code on the caller's side that process/catch the exception, should it occur

catch(Exception e)
{
	e.TargetSite; //allows you to determine the various details about the method that threw a given exception
}



Chapter08
Working with Interfaces

Interfaces can have:
member definitions (like abstract methods)
default implementations (virtual methods
static members

interfaces cannot have nonstatic constructors

interfaces are highly polymorphic

explicit casts
MyInterface myInterfaceInstance = myClassInstance as MyInterface;

myClassInstance is MyInterface myInterfaceInstance;

Default Implementations (C# 8.0)

static constructors are allowed: must be parameterless and can only access static properties and methods

Explicitly bind an interface implementations to a given interface
// example
class MyClass : InterfaceA, InterfaceB
{
	returnType InterfaceA.TheMethod()
	{
		// actual implementation
	}
	
	returnType InterfaceB.TheMethod()
	{
		// actual implementation
	}
}

interface hierarchies are when interfaces inherit from other interfaces
when interface hierarchies include default implementations, downstream interfaces can choose to carry the implementation from the base interface or create a new default implementation

the best way to view this chapter is to remember that interfaces are types, and can be used in that manner at all times and you want to model a common behavior that is found across multiple hierarchies with no common parent class beyond System.Object



Chapter09
Understanding Object Lifetime

heap allocation occurs only when you are creating instances of classes

when the C# compiler encounters the new keyword, it emits a CIL newobj instruction into the method implementation
the managed heap maintains a pointer, the next object pointer or new object pointer, that identifies exactly where the next object will be located
newobj instruction tells the runtime to perform the following core operations
1.) calculate the total amount of memory required for the object to be allocated, including the memory required by the data members and the base classes
2.) examine the managed heap to ensure that there is indeed enough room to host the object to be allocated. If yes, the specified constructor is called, the caller is returned a reference to the new object in memory whose address just happens to be identical to the last position of the next object pointer
3.) before returning the reference to the caller, advance the next object pointer to point to the next available slot on the managed heap

if the managed heap does not have sufficient memory to allocate a requested object, a garbaga collection will occur

Garage collection uses the following information to determine if an object is live:
stack roots: stack variables provided by the compiler and stack walker
garbage collection handles: handles that point to managed objects that can be referenced from code or the runtime
static data: static objects in application domains that can reference other objects

during the garbage collection process, the runtime will investiage objects on the managed heap to determine whether they are still reachable by the application, the runtime will buid an object graph.
object graph: used to document all reachable objects

there is a large heap to store large objects, it is called les frequently and can be compacted on demand

to avoid scanning every object, a generation is used. The longer the object has existed on the heap, the more likely it is to stay there
Generation 0: newly allocated object that has never been marked for collection
Generation 1: an object that has survived garbage collection, serves as a buffer between short-lived objects and long-lived object
Generation 2: identifies an object that has survived more than one sweep of the garbage collector, or a significantly large object that started in a generation 2 collection

ephemeral generations: generations 0 and 1 are short-lived

System.GC

// Force a garbage collection and wait for each object to be finalized.
GC.Collect();
GC.WaitForPendingFinalizers();

// Only investigate generation 0 objects.
GC.Collect(0);
GC.WaitForPendingFinalizers();

implement the IDisposable interface to ensure tidy clean up of your code

using declarations: a variable declaration preceded by the using keyword

//variable will be in scope until the end of the method
myMethod()
{
	using var rw = new MyResource();
}

Lazy objects
Lazy<> allows you to define data that will not be created unless your code base actually uses it


PART IV - ADVANCED C# PROGRAMMING
Chapter10
Collections and Generics

boxing: value type --> reference type
unboxing: reference type --> value type

int myInt = 25;
//box the int into an object reference
object boxedInt = myInt;
//unbox the reference back into a corresponding int
int unboxedInt = (int)boxedInt;

PriorityQueue<TElement, TPriority>
works just like Queue<T>, except each item is given a priority, items are removed from lowest to highest priority

SortedSet<T> Class

class ExampleSort : IComparer<MyType>
{
	public in Compare(MyType type01, MyType type02)
	{
		if(type01?.fieldName > type02?.fieldName)
		{
			return 1;
		}
		if (type01?.fieldName < type02?.fieldName)
		{
			return -1;
		}
		return 0;
	}
}

ObservableCollection<T>
identical to working with List<T>, supports the CollectionChanged event, the event fires whenver a new item is inserted, a current item is removed/relocated, or the entire collection is modified

// example
ObservableCollection<Person> people = new ObservableCollection<Person>()
{
    new Person { FirstName="Peter", LastName="Billy", Age=52},
    new Person { FirstName="Kvein", LastName="Sammy", Age=48}
};

static void people_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
{
    Console.WriteLine("Action for this event: {0}", e.Action);
    if(e.Action == NotifyCollectionChangedAction.Remove)
    {
        Console.WriteLine("Here are the old items");
        foreach(Person p in e.OldItems)
        {
            Console.WriteLine(p.ToString());
        }
    }

    if (e.Action == NotifyCollectionChangedAction.Add)
    {
        Console.WriteLine("Here are the new items");
        foreach(Person p in e.NewItems)
        {
            Console.WriteLine(p.ToString());
        }
    }
}

people.CollectionChanged += people_CollectionChanged;

people.Add(new Person("Fred", "Smith", 32));
people.RemoveAt(0);

Creating Custom Generic Methods

//example
static void Swap<T>(ref T a, ref T b)
{
    Console.WriteLine("You sent the Swap() method a {0}", typeof(T));
    T temp = a;
    a = b;
    b = temp;
}

int x1 = 11;
int x2 = 24;
Swap<int>(ref x1, ref x2);
Console.WriteLine("New x1: {0}, New x2: {1}", x1, x2);

Creating Custom Generic Structures and Classes

// setting the default value in a field within a class
_xPos = default

Pattern Matching with Generics
can take generics as the type parameter

Constraining Type Parameters
generic constraint			meaning in life
where T : struct			<T> must have System.ValueType
where T : class				<T> must not have System.ValueType
where T : new()				<T> must have a default constructor, useful when you must create an instance of the type 
							parameter because you cannot assume you know the format of custom constructors, listed last
where T : NameOfBaseClass	<T> must be derived from the class specified by NameOfBaseClass
where T : NameOfInterface	<T> must implement the interface specified by NameOfInterface



Chapter11
Advanced C# Language Features


































git log --all -decorate --oneline --graph
git config --global alias.adog "log --all -decorate --oneline --graph"
git checkout hash_code


dotnet tool install --global dotnet-ef --version 9.0.0






PART IX - ASP.NET CORE
Chapter30
Introducing ASP.NET Core

Model-View-Controller (MVC) patterns
Model: data is represented by Plain Old CLR Objects (POCOs)
View: the user interface of the application, accepts commands and renders the results to the user, should be as lightwieght as possible
Controller: the brains of the application, take commands/requests from the user and handle them appropriately

Kestrel: is the open source web server

Create a ASP.NET Core Web API

















































































